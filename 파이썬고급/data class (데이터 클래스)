Python에서 **데이터 클래스(data class)**는 주로 데이터를 저장하고 관리하기 위한 클래스를 손쉽게 정의할 수 있도록 하는 기능입니다. Python 3.7부터 도입된 dataclasses 모듈을 사용하면, 간단한 구문으로 데이터 저장용 클래스를 정의할 수 있습니다. 데이터 클래스는 주로 값 저장 및 관리 목적으로 사용되며, 일반적으로 객체의 속성들을 선언하고 자동으로 생성자, 비교 메서드, 표현 메서드 등을 생성해줍니다.

데이터 클래스의 특징과 사용법
데이터 클래스를 만들 때는 클래스 정의 위에 @dataclass 데코레이터를 사용합니다. @dataclass는 클래스에 몇 가지 자동화된 기능을 추가하여 데이터를 저장하는 데 필요한 메서드들을 쉽게 정의할 수 있도록 합니다.

기본 사용법
from dataclasses import dataclass

@dataclass
class Person:
    name: str
    age: int
    city: str
위의 코드에서는 Person이라는 데이터 클래스가 정의되었습니다. name, age, city라는 세 개의 속성이 있으며, @dataclass가 자동으로 생성자를 추가해줍니다.

person1 = Person(name="Alice", age=30, city="New York")
print(person1)
출력 결과:

arduino

Person(name='Alice', age=30, city='New York')
데이터 클래스가 자동으로 생성하는 메서드들
@dataclass를 사용하면 Python은 다음과 같은 메서드를 자동으로 생성합니다:

__init__(): 생성자를 자동으로 정의하여 속성을 초기화합니다.
__repr__(): 객체의 표현을 문자열로 반환하는 __repr__() 메서드를 자동으로 생성해줍니다.
__eq__(): 객체 간의 값을 비교할 수 있도록 __eq__() 메서드를 생성합니다.
__hash__(): 불변 객체에 대해 해시 값을 생성할 때 유용합니다(해시 가능 객체일 경우에만).
이 기능들 덕분에 개발자는 반복적인 코드를 작성할 필요가 없어지며, 데이터 저장용 객체를 훨씬 간편하게 만들 수 있습니다.

추가 기능: 필드 옵션 지정
dataclass의 field() 함수를 사용하여 각 속성에 대한 옵션을 지정할 수 있습니다.

from dataclasses import dataclass, field

@dataclass
class Product:
    name: str
    price: float
    quantity: int = field(default=0)  # 기본값 설정
    in_stock: bool = field(default=True, init=False)  # 생성자에서 제외됨
위 예제에서 quantity는 기본값으로 0을 가지며, in_stock는 생성자에서 제외되어 항상 True로 설정됩니다.

dataclass의 다양한 옵션
frozen=True: 불변(immutable) 객체를 만들고자 할 때 사용합니다. 객체가 생성된 후 속성을 변경할 수 없도록 합니다.
order=True: 데이터 클래스를 정렬 가능한 객체로 만들어줍니다. <, >, <=, >= 연산자를 지원하는 메서드가 자동으로 추가됩니다.

from dataclasses import dataclass

@dataclass(frozen=True, order=True)
class Book:
    title: str
    author: str
    year: int
      
예제: 데이터 클래스 활용
from dataclasses import dataclass

@dataclass
class Employee:
    name: str
    position: str
    salary: float

employee1 = Employee("John Doe", "Developer", 70000)
employee2 = Employee("Jane Smith", "Designer", 75000)

# 자동으로 생성된 __repr__ 메서드 사용
print(employee1)  # Employee(name='John Doe', position='Developer', salary=70000)

# 자동으로 생성된 __eq__ 메서드로 비교
print(employee1 == employee2)  # False

      
데이터 클래스의 장점
코드 간결성: 반복적인 코드 없이 데이터 클래스 정의가 간단해집니다.
자동 메서드 생성: 생성자, 비교, 표현 등의 메서드를 자동으로 생성해줍니다.
읽기 쉬운 코드: 데이터 클래스는 데이터 구조를 명확하게 표현하기 때문에 코드가 직관적입니다.
데이터 클래스는 주로 간단한 데이터 객체를 정의할 때 유용하며, JSON이나 파일에서 로드한 데이터를 담아 관리하거나, 데이터 처리용 클래스를 정의할 때 사용하기 좋습니다.
