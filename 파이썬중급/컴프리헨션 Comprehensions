컴프리헨션(Comprehensions)이란?
컴프리헨션은 리스트(List), 딕셔너리(Dictionary), 세트(Set) 등을 간결하게 생성할 수 있는 Python의 문법입니다.
반복문과 조건문을 한 줄로 작성하여 가독성을 높이고 코드의 길이를 줄이는 데 사용됩니다.

1. 리스트 컴프리헨션 (List Comprehension)
리스트를 생성하는 가장 간단한 컴프리헨션 방식입니다.

기본 문법

[<표현식> for <아이템> in <반복 가능한 객체> if <조건>]
예제
숫자의 제곱 리스트 만들기

numbers = [1, 2, 3, 4, 5]
squared_numbers = [x**2 for x in numbers]
print(squared_numbers)  # 출력: [1, 4, 9, 16, 25]
조건을 포함한 리스트

even_numbers = [x for x in numbers if x % 2 == 0]
print(even_numbers)  # 출력: [2, 4]
중첩 반복문

pairs = [(x, y) for x in range(3) for y in range(3)]
print(pairs)  # 출력: [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
2. 딕셔너리 컴프리헨션 (Dictionary Comprehension)
딕셔너리를 생성할 때 사용하는 컴프리헨션 방식입니다.

기본 문법

{<키 표현식>: <값 표현식> for <아이템> in <반복 가능한 객체> if <조건>}
예제
숫자와 제곱 값 딕셔너리

numbers = [1, 2, 3, 4, 5]
squared_dict = {x: x**2 for x in numbers}
print(squared_dict)  # 출력: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
조건을 포함한 딕셔너리

even_squared_dict = {x: x**2 for x in numbers if x % 2 == 0}
print(even_squared_dict)  # 출력: {2: 4, 4: 16}
문자열을 키와 값으로 변환

word = "hello"
char_dict = {char: word.count(char) for char in set(word)}
print(char_dict)  # 출력: {'h': 1, 'e': 1, 'l': 2, 'o': 1}
3. 세트 컴프리헨션 (Set Comprehension)
세트를 생성하는 컴프리헨션 방식입니다.
리스트 컴프리헨션과 비슷하지만, 결과가 중복되지 않고 set으로 생성됩니다.

기본 문법

{<표현식> for <아이템> in <반복 가능한 객체> if <조건>}
예제
숫자의 제곱 세트

numbers = [1, 2, 3, 4, 5, 2, 3]
squared_set = {x**2 for x in numbers}
print(squared_set)  # 출력: {1, 4, 9, 16, 25}
조건을 포함한 세트

even_set = {x for x in numbers if x % 2 == 0}
print(even_set)  # 출력: {2, 4}

4. 비교
컴프리헨션 종류	반환 타입	사용 예제
리스트	list	[x**2 for x in range(5)]
딕셔너리	dict	{x: x**2 for x in range(5)}
세트	set	{x**2 for x in range(5)}
장점
간결성: 코드가 더 짧고 읽기 쉬움.
성능: 반복문보다 약간 더 빠를 수 있음.
가독성: 복잡한 로직을 간단히 표현.
단점
과도한 사용: 지나치게 복잡한 컴프리헨션은 오히려 가독성을 해침.
디버깅 어려움: 코드가 한 줄로 작성되어 디버깅이 어렵게 느껴질 수 있음.
컴프리헨션은 반복적인 작업을 효율적으로 처리하는 데 유용하며, 적절히 사용하면 코드 품질을 크게 향상시킬 수 있습니다. 😊
