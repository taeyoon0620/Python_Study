정규표현식 (Regular Expressions)
정의
정규표현식(Regular Expressions, 줄여서 regex 또는 regexp)은 문자열의 검색, 추출, 치환 등을 위해 특정한 패턴을 정의하는 도구입니다.
문자열의 패턴을 기반으로 복잡한 문자열 작업을 간결하고 효율적으로 처리할 수 있습니다.
Python에서 정규표현식 사용
Python에서는 re 모듈을 사용하여 정규표현식을 처리합니다.

re 모듈의 주요 함수
함수	설명
re.match()	문자열의 시작 부분이 패턴과 일치하는지 검사
re.search()	문자열의 어디에서든 패턴과 일치하는 부분을 검색
re.findall()	문자열에서 패턴과 일치하는 모든 부분을 리스트로 반환
re.finditer()	패턴과 일치하는 모든 부분을 이터레이터로 반환
re.sub()	패턴과 일치하는 부분을 다른 문자열로 치환
re.split()	패턴을 기준으로 문자열을 분할
re.compile()	정규표현식을 미리 컴파일하여 성능 최적화
정규표현식 기초 패턴
1. 메타문자
메타문자는 패턴을 정의하는 데 사용되는 특별한 문자입니다.

메타문자	의미	예제	설명
.	임의의 문자 한 개	a.b	a와 b 사이에 임의의 문자
^	문자열의 시작	^hello	hello로 시작하는 문자열
$	문자열의 끝	world$	world로 끝나는 문자열
*	0회 이상 반복	ab*	a 뒤에 b가 0개 이상
+	1회 이상 반복	ab+	a 뒤에 b가 1개 이상
?	0회 또는 1회	ab?	a 뒤에 b가 없거나 1개
{n}	정확히 n회 반복	a{3}	aaa
{n,m}	n~m회 반복	a{2,4}	aa, aaa, aaaa
2. 문자 클래스
문자 클래스는 특정 문자 집합과 일치합니다. 대괄호 []를 사용합니다.

패턴	의미	예제	설명
[abc]	a, b, 또는 c 중 하나	b	b와 일치
[^abc]	a, b, c 제외	x	x와 일치
[a-z]	소문자 알파벳	f	f와 일치
[0-9]	숫자	3	3와 일치
3. 이스케이프 문자
이스케이프 문자는 특정 메타문자를 일반 문자로 인식하거나, 특별한 패턴을 정의합니다.

패턴	의미	예제
\d	숫자 (0~9)	\d+
\D	숫자가 아닌 문자	\D+
\w	문자, 숫자, 밑줄	\w+
\W	문자, 숫자, 밑줄이 아닌 문자	\W+
\s	공백 문자 (띄어쓰기, 탭, 줄바꿈)	\s+
\S	공백이 아닌 문자	\S+
예제
1. match()와 search()

import re

# match: 문자열 시작부터 검사
result = re.match(r'Hello', 'Hello, World!')
print(result)  # <re.Match object>

# search: 문자열 전체에서 검사
result = re.search(r'World', 'Hello, World!')
print(result)  # <re.Match object>
2. findall()과 finditer()

import re

text = "Email: test@example.com, test2@example.com"
# findall: 모든 패턴을 리스트로 반환
emails = re.findall(r'\b\w+@\w+\.\w+\b', text)
print(emails)  # ['test@example.com', 'test2@example.com']

# finditer: 모든 패턴을 이터레이터로 반환
for match in re.finditer(r'\b\w+@\w+\.\w+\b', text):
    print(match.group())  # 'test@example.com', 'test2@example.com'
3. sub()과 split()

import re

# sub: 치환
text = "apple orange banana"
result = re.sub(r'orange', 'grape', text)
print(result)  # apple grape banana

# split: 패턴 기준으로 분할
text = "one, two; three.four"
result = re.split(r'[,\.;]', text)
print(result)  # ['one', ' two', ' three', 'four']

정규표현식의 활용 예
1. 이메일 검증

import re

email = "test@example.com"
pattern = r'^\w+@\w+\.\w+$'
if re.match(pattern, email):
    print("유효한 이메일")
else:
    print("유효하지 않은 이메일")
2. 전화번호 검증

import re

phone = "010-1234-5678"
pattern = r'^010-\d{4}-\d{4}$'
if re.match(pattern, phone):
    print("유효한 전화번호")
else:
    print("유효하지 않은 전화번호")

정리
정규표현식은 문자열 조작에서 강력한 도구입니다.
re 모듈을 사용하면 패턴 기반 검색, 치환, 분할 등을 손쉽게 구현할 수 있습니다.
