Python에서 while 반복문은 조건이 참(True)인 동안 특정 코드 블록을 반복 실행하는 제어 구조입니다. 이를 심화적으로 이해하기 위해 주요 개념, 고급 사용법, 그리고 실전 예제를 함께 살펴보겠습니다.

1. 기본 구조

while 조건:
    # 실행할 코드
조건이 True이면 코드 블록이 실행됩니다.
조건이 False가 되면 반복문이 종료됩니다.
2. 고급 사용법
a. 무한 루프
while True는 무한히 반복되며, 조건을 명시적으로 종료해야 합니다.

while True:
    user_input = input("종료하려면 'exit' 입력: ")
    if user_input == 'exit':
        print("반복문 종료!")
        break  # 반복문 탈출
b. break와 continue
break: 반복문을 즉시 종료합니다.
continue: 현재 반복을 건너뛰고 다음 반복으로 이동합니다.

# 1~10까지 숫자 중 5를 제외하고 출력
i = 0
while i < 10:
    i += 1
    if i == 5:
        continue  # 5를 건너뜀
    print(i)
c. 조건 없는 루프 탈출
break 없이도 조건에 따라 반복문을 종료할 수 있습니다.

x = 0
while x < 10:
    print(x)
    x += 1
else:
    print("반복문이 정상적으로 종료되었습니다.")
Note: while에 붙는 else는 반복문이 break 없이 끝났을 때 실행됩니다.

3. 중첩 while문
while문 내부에 또 다른 while문을 사용할 수 있습니다.

i = 0
while i < 3:
    j = 0
    while j < 2:
        print(f"i: {i}, j: {j}")
        j += 1
    i += 1
출력:

i: 0, j: 0
i: 0, j: 1
i: 1, j: 0
i: 1, j: 1
i: 2, j: 0
i: 2, j: 1
4. 실전 활용 예제
a. 사용자 입력을 통한 데이터 처리

while True:
    command = input("명령어 입력 (종료하려면 'exit'): ")
    if command == 'exit':
        print("프로그램 종료")
        break
    else:
        print(f"입력한 명령어: {command}")
b. 간단한 숫자 추측 게임

import random

number_to_guess = random.randint(1, 100)
while True:
    guess = int(input("숫자를 맞춰보세요 (1~100): "))
    if guess > number_to_guess:
        print("더 작은 숫자입니다.")
    elif guess < number_to_guess:
        print("더 큰 숫자입니다.")
    else:
        print("정답입니다!")
        break
c. 비밀번호 재시도 시스템

correct_password = "1234"
attempts = 0
max_attempts = 3

while attempts < max_attempts:
    password = input("비밀번호를 입력하세요: ")
    if password == correct_password:
        print("비밀번호가 올바릅니다.")
        break
    else:
        attempts += 1
        print(f"잘못된 비밀번호입니다. {max_attempts - attempts}회 남음.")
else:
    print("비밀번호 입력 제한 초과. 접근 금지.")
5. 무한 루프 활용 사례
서버/서비스 유지
무한 루프는 서버 프로그램이나 데이터 스트림과 같이 계속 실행되어야 하는 프로그램에 적합합니다.

while True:
    # 서버 요청 대기
    print("서버 대기 중...")
    # 처리 코드 추가
    break  # 예시에서는 종료
6. 비효율적인 반복을 피하기 위한 팁
조건이 명확해야 함: 조건이 명확하지 않으면 무한 루프가 발생할 수 있습니다.

# 무한 루프 예
i = 0
while i < 5:  # i가 증가하지 않으면 무한 루프 발생
    print(i)
break를 사용한 제어: 탈출 조건이 명확해야 합니다.

# 안전한 종료 조건 추가
i = 0
while i < 5:
    print(i)
    i += 1  # i 증가 조건
요약
while문은 단순한 반복에서부터 복잡한 프로그램 흐름 제어까지 다양하게 활용됩니다. 중요한 점은 반복 조건을 명확히 정의하고, 필요한 경우 break와 continue를 적절히 사용하여 효율적으로 제어하는 것입니다.
